virome <-  as_tibble(ddply(virome0, .(IDs, Acronym, cluster), summarise, no= mean(as.numeric(as.factor(virome$Acronym)))))
virome
virome <-  as_tibble(ddply(virome0, .(IDs, Acronym, cluster), summarise, no= mean(as.numeric(as.factor(virome$IDs)))))
virome
virome <-  as_tibble(ddply(virome0, .(IDs, Acronym, cluster), summarise, no= sum(as.numeric(as.factor(virome$IDs)))))
virome
virome <-  as_tibble(ddply(virome0, .(IDs, Acronym, cluster), summarise, no= sum(as.numeric(as.factor(virome$IDs)))))
virome <-  as_tibble(ddply(virome0, .(IDs, Acronym, cluster), summarise, no= sum(as.numeric(as.factor(virome$IDs)))))
virome
virome <-  as_tibble(ddply(virome0, .(IDs, Acronym, cluster), summarise, no= sum(as.numeric(as.factor(IDs)))))
virome
virome0
virome <-  as_tibble(ddply(virome0, .(IDs, Acronym, cluster), summarise, no= sum(as.numeric(as.factor(IDs)))))
virome
virome <-  as_tibble(ddply(virome0, .(IDs, cluster), summarise, no= sum(as.numeric(as.factor(IDs)))))
virome
#virome0=viromeReads[viromeReads$Coverage > 1,]
#IDs.mastre <- virome0$IDs[virome0$Acronym == "SPSMV-1"]
#mastre.0 <- virome0[which(virome0$IDs %in% IDs.mastre), ]
# table(mastre.0$Acronym)
# plotting incidence
# pdf("SSA-SPV_all_incidence.pdf", width = 15, height = 30)
# par(mfrow=c(4,2), mar=c(8,8,8,8))
# All
plot(sort(table(virome$cluster), decreasing = T), las= 2, cex.axis = 0.5,lwd=5,
ylim=c(0,1350), ylab = "Virus Incidence", main="SSA-SPV virus incidence")
virome
virome$cluster
#virome0=viromeReads[viromeReads$Coverage > 1,]
#IDs.mastre <- virome0$IDs[virome0$Acronym == "SPSMV-1"]
#mastre.0 <- virome0[which(virome0$IDs %in% IDs.mastre), ]
# table(mastre.0$Acronym)
# plotting incidence
# pdf("SSA-SPV_all_incidence.pdf", width = 15, height = 30)
# par(mfrow=c(4,2), mar=c(8,8,8,8))
# All
plot(sort(virome$cluster, decreasing = T), las= 2, cex.axis = 0.5,lwd=5,
ylim=c(0,1350), ylab = "Virus Incidence", main="SSA-SPV virus incidence")
#virome0=viromeReads[viromeReads$Coverage > 1,]
#IDs.mastre <- virome0$IDs[virome0$Acronym == "SPSMV-1"]
#mastre.0 <- virome0[which(virome0$IDs %in% IDs.mastre), ]
# table(mastre.0$Acronym)
# plotting incidence
# pdf("SSA-SPV_all_incidence.pdf", width = 15, height = 30)
# par(mfrow=c(4,2), mar=c(8,8,8,8))
# All
plot(sort(table(virome$cluster), decreasing = T), las= 2, cex.axis = 0.5,lwd=5,
ylim=c(0,1350), ylab = "Virus Incidence", main="SSA-SPV virus incidence")
abline(h=50, col = "red")
virome
table(virome$cluster
)
load("/Users/ricardoi/Dropbox (UFL)/Alcala_Briseno-Garrett/+++Sweetpotato_virome/+Sweetpotato_virome/SSA-SPV_Feb28/1-kcluster-bipartitenetworkFeb28.RData")
k1vina
table(k1vina$cluster)
View(kclusters)
viromeReads <- ddply(kclusters, .(IDs, Family, Genus, Species, Acronym, cluster),
summarise, Coverage=mean(RPKM_mean))
kclusters
View(kclusters)
View(kvina)
viromeReads <- ddply(kvina, .(IDs, Family, Genus, Species, Acronym, cluster),
summarise, Coverage=mean(RPKM_mean))
kvina
kvina$cluster
table(kvina$cluster)
kvina
virome0 <- as_tibble(ddply(k1vina, .(IDs, Acronym, cluster), summarise, Cov= mean(RPKM_mean)))
virome0
table(virome0$cluster)
virome0 <- as_tibble(ddply(kvina, .(IDs, Acronym, cluster), summarise, Cov= mean(RPKM_mean)))
virome0
table(virome0$cluster)
virome <-  as_tibble(ddply(virome0, .(IDs, cluster), summarise, no= sum(as.numeric(as.factor(IDs)))))
virome
ggplot(virome, aes(cluster))+
geom_bar(aes(fill=no=))
ggplot(virome, aes(cluster))+
geom_bar(aes(fill=no))
virome0
virome
ggplot(virome0, aes(cluster))+
geom_bar(aes(fill=no))
virome0
ggplot(virome0, aes(cluster))+
geom_bar(aes(fill=Cov))
virome0
ggplot(virome0, aes(cluster))+
geom_bar(aes(fill=IDs),
position = position_fill(reverse = F))
ggplot(virome0, aes(cluster))+
geom_bar(aes(fill=Acronym),
position = position_fill(reverse = F))
ggplot(virome0, aes(cluster))+
geom_bar(aes(fill=Acronym),
position = position_fill(reverse = F))
ggplot(virome0, aes(cluster))+
geom_bar(aes(fill=Acronym))
virome0
virome0 <- as_tibble(ddply(kvina, .(IDs, Acronym, cluster), summarise, Cov= RPKM_mean/RPKM_mean))
virome0
table(virome0$cluster)
virome0
virome <-  as_tibble(ddply(virome0, .(IDs, cluster), summarise, count= sum(Cov)))
virome
virome0$IDs
virome0
collapse(virome$count)
collapse(virome$IDs)
collapse(virome$cluster)
(virome$cluster)
(virome$IDs)
(virome$cluster)
(virome$IDs)
(virome$count)
(virome)
(virome0$count)
(virome0)
virome <-  as_tibble(ddply(virome0, .(IDs, Acronym, cluster), summarise, count= (Cov)))
virome <-  as_tibble(ddply(virome0, .(IDs, Acronym, cluster), summarise, count= (Cov)))
virome
virome <-  as_tibble(ddply(virome0, .(IDs, cluster), summarise, count= (Cov)))
virome
virome0 <- as_tibble(ddply(kvina, .(IDs, Acronym, cluster), summarise, Cov= RPKM_mean/RPKM_mean))
virome0
virome <-  as_tibble(ddply(virome0, .(IDs, cluster), summarise, count= (Cov)))
virome
virome0 <- as_tibble(ddply(kvina, .(IDs, Acronym, cluster), summarise, Cov= RPKM_mean/RPKM_mean))
virome0
virome <-  as_tibble(ddply(virome0, .(IDs, Acronym, cluster), summarise, count= (Cov)))
virome
#virome0=viromeReads[viromeReads$Coverage > 1,]
#IDs.mastre <- virome0$IDs[virome0$Acronym == "SPSMV-1"]
#mastre.0 <- virome0[which(virome0$IDs %in% IDs.mastre), ]
# table(mastre.0$Acronym)
# plotting incidence
# pdf("SSA-SPV_all_incidence.pdf", width = 15, height = 30)
# par(mfrow=c(4,2), mar=c(8,8,8,8))
# All
plot(sort(table(virome$cluster), decreasing = T), las= 2, cex.axis = 0.5,lwd=5,
ylim=c(0,1350), ylab = "Virus Incidence", main="SSA-SPV virus incidence")
#virome0=viromeReads[viromeReads$Coverage > 1,]
#IDs.mastre <- virome0$IDs[virome0$Acronym == "SPSMV-1"]
#mastre.0 <- virome0[which(virome0$IDs %in% IDs.mastre), ]
# table(mastre.0$Acronym)
# plotting incidence
# pdf("SSA-SPV_all_incidence.pdf", width = 15, height = 30)
# par(mfrow=c(4,2), mar=c(8,8,8,8))
# All
plot(sort(table(virome$IDs), decreasing = T), las= 2, cex.axis = 0.5,lwd=5,
ylim=c(0,1350), ylab = "Virus Incidence", main="SSA-SPV virus incidence")
kvina
kvina
kvina2
kvina
kvina2
kvina
table(kvina$cluster)
kvina$cluster
kvina
virome <- ddply(kvina, .(IDs, Family, Genus, Species, Acronym, cluster),
summarise, Coverage=mean(RPKM_mean))
virome
virome <- ddply(kvina, .(IDs, Family, Genus, Acronym, cluster),
summarise, Coverage=mean(RPKM_mean))
virome
unique(virome$IDs)
length(unique(virome$IDs))
virome$IDs
table(virome$IDs)
virome$IDs
virome
virome0 <- as_tibble(ddply(virome, .(IDs, Acronym, cluster), summarise, Cov= RPKM_mean/RPKM_mean))
virome
virome0 <- as_tibble(ddply(virome, .(IDs, Acronym, cluster), summarise, Cov= Coverage/Coverage))
virome0
table(virome, IDs, cluster)
table(virome$IDs, virome$cluster)
virome0
table(virome0$cluster)
virome0 <- as_tibble(ddply(virome, .(IDs, Acronym, cluster), summarise, Cov= Coverage/Coverage))
virome0
virome0
table(virome0$IDs)
virome
library(igraph )
graph_from_data_frame(virome)
virome[1]
graph_from_data_frame(virome[1,4], )
graph_from_data_frame(virome[c(1,4)], )
g <- graph_from_data_frame(virome[c(1,4)], )
virome0 <- as_tibble(ddply(virome, .(IDs, Acronym, cluster), summarise, Cov= Coverage/Coverage))
plot(g)
V(viome)$type
V(virome)$type
V(g)$type
V(g)$
V(g)
V(g)
virome
?graph_from_data_frame
virome
vir <- ddply(virome, .(Acronym, IDs), summarise= cov = mean(Coverage))
vir <- ddply(virome, .(Acronym, IDs), summarise, cov = mean(Coverage))
vir
virome
vir <- ddply(virome, .(IDs, Acronym), summarise, cov = mean(Coverage))
vir
g <- graph_from_data_frame(vir,directed = F, vertices= virome )
vir
virome
g <- graph_from_data_frame(vir, directed = F, vertices= virome )
g <- graph_from_data_frame(vir, directed = F )
plot(g)
g
vir
tidyr::spread(vir, IDs, Coverage, drop=T, fill = 0)
vir
tidyr::spread(vir, IDs, cov, drop=T, fill = 0)
vir <-  tidyr::spread(vir, IDs, cov, drop=T, fill = 0)
vir[1:5, 1:5]
vir <- ddply(virome, .(IDs, Acronym), summarise, cov = mean(Coverage))
vir <-  tidyr::spread(vir, IDs, cov, drop=T, fill = 0)
rownames(vir) <- vir$Acronym
vir <- vir[-c(1)]
n=length(vir)
n
vir[1:5, 1:5]
paste("MESSAGE:: The lenght of the sample locations is ", length(datm), " and the data matrix is ", n,
", then dimesions are equal? A = ", length(unique(k1vina$IDs)) == length(datm), sep = "")
paste("MESSAGE:: The lenght of the sample locations is ", length(vir), " and the data matrix is ", n,
", then dimesions are equal? A = ", length(unique(vir$IDs)) == length(vir), sep = "")
paste("MESSAGE:: The lenght of the sample locations is ", length(vir), " and the data matrix is ", n,
", then dimesions are equal? A = ", length(unique(vir$IDs)) == length(vir), sep = "")
paste("MESSAGE:: The lenght of the sample locations is ", length(vir), " and the data matrix is ", n,
", then dimesions are equal? A = ", length(unique(k1vina$IDs)) == length(vir), sep = "")
paste("MESSAGE:: The lenght of the sample locations is ", length(vir), " and the data matrix is ", n,
", then dimesions are equal? A = ", length(unique(virome$IDs)) == length(vir), sep = "")
install.packages("Bergm")
library(Bergm)
install.packages("latentnet")
require(latentnet)
require(Bergm)
data(davis)
y <- davis
as.matrix.network.adjacency(y)
# Plot the bipartite network graph
set.seed(7)
plot(y,
displaylabels = TRUE,
edge.col = "gray",
vertex.col = c(rep("pink", 18), rep("skyblue", 14)),
vertex.sides = c(rep(40, 18), rep(4, 14)),
vertex.cex = c(rep(3.7, 18), rep(2, 14)),
label.cex = 0.4,
label.pos = 5)
# Model specification
formula <- y ~ edges + gwb2degree(0.7, fixed = TRUE) # undirected network
# Prior specification for BERGMS
prior.mean = c(-2, 0)
prior.mean
prior.sigma = matrix(c(1, -0.5,
-0.5, 2), nrow = 2) # covariance matrix
prior.sigma
# Prior visualisation
require(MASS)
require(mvtnorm)
r <- hcl.colors(9, "Blues 3")
set.seed(1)
z <- rmvnorm(50000, mean = prior.mean, sigma = prior.sigma)
k <- kde2d(z[, 1],
z[, 2],
n = 50)
image(k, col = r,
xlab = bquote(theta[.(1)]),
ylab = bquote(theta[.(2)]))
# Parameter estimation
set.seed(1)
m1.posterior <- bergm(formula,
prior.mean = prior.mean,
prior.sigma = prior.sigma,
aux.iters = 5000, # network simulation iterations
main.iters = 2500,
gamma = 1.4) # ADS parameter
formula
prior.mean
prior.sigma
m1.posterior <- bergm(formula,
prior.mean = prior.mean,
prior.sigma = prior.sigma,
aux.iters = 5000, # network simulation iterations
main.iters = 2500,
gamma = 1.4) # ADS parameter
bergm
R.version
R.version
library(rpart)
#-- loading data
mln_virome <- read.csv("data/Virome_MLN_Kenya_species_Wamaitha18.txt", sep = "\t"
, header = F)
#-- Setting working directory
setwd("git_db/TranslattingViromes/")
#-- loading data
mln_virome <- read.csv("data/Virome_MLN_Kenya_species_Wamaitha18.txt", sep = "\t"
, header = F)
mln_virome
dim(mln_virome)
# Manipulating data to construct a data frame
vsam = vls = 0
for (i in 1:nrow(mln_virome)){
obj <- paste(mln_virome$V1[i], mln_virome[i,], sep="-")
vls <- c(unlist(obj), vls)
}
vls
vdf <- strsplit(vls, split = "-")
for(i in seq_along(vls)){
vres  <- as.data.frame(t(as.data.frame(vdf[i])))
if (ncol(vres)  == 2 ){
vsam <-  rbind(vres, vsam)
}
}
vsam$rmcol <- as.numeric(vsam$V1) * as.numeric(vsam$V2)
vsam <- vsam[is.na(vsam$rmcol),]
rownames(vsam) <- 1:nrow(vsam)
colnames(vsam) <- c("IDs", "Species", "freq")
virome1=vsam
#--- Algorithm to classify viruses using Species
x=list()
Species <- unique(virome1$Species)
for (i in seq_along(Species)){
x[[i]] <- ifelse(Species[i] %in% c("Sugarcane mosaic virus", "Maize dwarf mosaic virus",
"Iranian johnsongrass mosaic virus", "Scallion mosaic virus",
"Potato virus V", "Telosma mosaic virus",
"Lily mottle virus", "Sorghum mosaic virus" ), "Potyvirus",
ifelse(Species[i] %in% c( "Maize chlorotic mottle virus"), "Machlomovirus",
ifelse(Species[i] %in% c("Maize yellow dwarf virus", "Maize yellow mosaic virus", "Barley virus G",
"Tobacco vein distorting virus", "Maize yellow dwarf virus 2"), "Polerovirus",
ifelse(Species[i] %in% c("Maize streak virus"), "Mastrevirus",
"no-poty-ni-maclo-ni-polero-ni-mastre"))))
}
#- formatting data frame
taxa<- data.frame(Species, "Genus"=unlist(x))
virome1$freq <- rep(1, nrow(virome1))
virome1 = merge(virome1, taxa, by="Species")
#----- Custom Algorithm to create vectors
for (i in seq_along(Species)){
x[[i]] <- ifelse(Species[i] %in% c("Sugarcane mosaic virus", "Maize dwarf mosaic virus",
"Iranian johnsongrass mosaic virus", "Scallion mosaic virus",
"Potato virus V", "Telosma mosaic virus",
"Lily mottle virus", "Sorghum mosaic virus" ), "aphid",
ifelse(Species[i] %in% c( "Maize chlorotic mottle virus"), "beetles",
ifelse(Species[i] %in% c("Maize yellow dwarf virus", "Maize yellow mosaic virus", "Barley virus G",
"Tobacco vein distorting virus", "Maize yellow dwarf virus 2"), "aphid",
ifelse(Species[i] %in% c("Maize streak virus"), "grasshoppers",
"NULL"))))
}
vectors <- data.frame(Species, "vector"=unlist(x))
virome1 = merge(virome1, vectors, by="Species")
#----- Custom Algorithm to create vectors
for (i in seq_along(Species)){
x[[i]] <- ifelse(Species[i] %in% c("Sugarcane mosaic virus", "Maize dwarf mosaic virus",
"Iranian johnsongrass mosaic virus", "Scallion mosaic virus",
"Potato virus V", "Telosma mosaic virus",
"Lily mottle virus", "Sorghum mosaic virus" ), "mechanical",
ifelse(Species[i] %in% c( "Maize chlorotic mottle virus"), "mechanical",
ifelse(Species[i] %in% c("Maize yellow dwarf virus", "Maize yellow mosaic virus", "Barley virus G",
"Tobacco vein distorting virus", "Maize yellow dwarf virus 2"), "vector-only",
ifelse(Species[i] %in% c("Maize streak virus"), "vector-only",
"NULL"))))
}
transmission <- data.frame(Species, "transmission"=unlist(x))
virome1 = merge(virome1, transmission, by="Species")
#----- Custom Algorithm to create seed transmitted
for (i in seq_along(Species)){
x[[i]] <- ifelse(Species[i] %in% c("Sugarcane mosaic virus","Maize dwarf mosaic virus",
"Iranian johnsongrass mosaic virus", "Sorghum mosaic virus" ), "seed",
ifelse(Species[i] %in% c( "Maize chlorotic mottle virus"), "seed",
ifelse(Species[i] %in% c("Maize yellow dwarf virus", "Maize yellow mosaic virus", "Barley virus G",
"Tobacco vein distorting virus", "Maize yellow dwarf virus 2"), "seed",
ifelse(Species[i] %in% c("Maize streak virus"), "not seed",
"unknown"))))
}
#----- Custom Algorithm to create seed transmitted
for (i in seq_along(Species)){
x[[i]] <- ifelse(Species[i] %in% c("Sugarcane mosaic virus"), "seed",
ifelse(Species[i] %in% c( "Maize chlorotic mottle virus"), "seed",
ifelse(Species[i] %in% c("other"), "seed",
ifelse(Species[i] %in% c("Maize streak virus"), "not seed",
"unknown"))))
}
VMUs <- data.frame(Species, "seedtrans"=unlist(x))
virome1 = merge(virome1, VMUs, by="Species")
#----- Custom Algorithm to create resistance
for (i in seq_along(Species)){
x[[i]] <- ifelse(Species[i] %in% c("Sugarcane mosaic virus","Maize dwarf mosaic virus",
"Sorghum mosaic virus" ), "resistance",
ifelse(Species[i] %in% c( "Maize chlorotic mottle virus"), "tolerance",
ifelse(Species[i] %in% c("Maize yellow dwarf virus", "Maize yellow mosaic virus", "Barley virus G",
"Tobacco vein distorting virus", "Maize yellow dwarf virus 2"), "unknown",
ifelse(Species[i] %in% c("Maize streak virus"), "unknown",
"unknown"))))
}
VMUs <- data.frame(Species, "resistance"=unlist(x))
virome1 = merge(virome1, VMUs, by="Species")
#----- Custom Algorithm to sanitizing
for (i in seq_along(Species)){
x[[i]] <- ifelse(Species[i] %in% c("Sugarcane mosaic virus","Maize dwarf mosaic virus",
"Sorghum mosaic virus" ), "effective",
ifelse(Species[i] %in% c( "Maize chlorotic mottle virus"), "effective",
ifelse(Species[i] %in% c("Maize yellow dwarf virus", "Maize yellow mosaic virus", "Barley virus G",
"Tobacco vein distorting virus", "Maize yellow dwarf virus 2"), "ineffective",
ifelse(Species[i] %in% c("Maize streak virus"), "ineffective",
"unknown"))))
}
VMUs <- data.frame(Species, "sanitizing"=unlist(x))
virome1 = merge(virome1, VMUs, by="Species")
x[[i]] <- ifelse(Species[i] %in% c("Sugarcane mosaic virus","Maize dwarf mosaic virus",
"Iranian johnsongrass mosaic virus", "Sorghum mosaic virus" ), "effective",
ifelse(Species[i] %in% c( "Maize chlorotic mottle virus"), "ineffective",
ifelse(Species[i] %in% c("Maize yellow dwarf virus", "Maize yellow mosaic virus", "Barley virus G",
"Tobacco vein distorting virus", "Maize yellow dwarf virus 2"), "ineffective",
ifelse(Species[i] %in% c("Maize streak virus"), "ineffective",
"innefective"))))
#----- Custom Algorithm to create antifeedant
for (i in seq_along(Species)){
x[[i]] <- ifelse(Species[i] %in% c("Sugarcane mosaic virus","Maize dwarf mosaic virus",
"Iranian johnsongrass mosaic virus", "Sorghum mosaic virus" ), "effective",
ifelse(Species[i] %in% c( "Maize chlorotic mottle virus"), "ineffective",
ifelse(Species[i] %in% c("Maize yellow dwarf virus", "Maize yellow mosaic virus", "Barley virus G",
"Tobacco vein distorting virus", "Maize yellow dwarf virus 2"), "ineffective",
ifelse(Species[i] %in% c("Maize streak virus"), "ineffective",
"innefective"))))
}
VMUs <- data.frame(Species, "antifeedant"=unlist(x))
virome1 = merge(virome1, VMUs, by="Species")
#----- Custom Algorithm to create insecticide
for (i in seq_along(Species)){
x[[i]] <- ifelse(Species[i] %in% c("Sugarcane mosaic virus","Maize dwarf mosaic virus",
"Iranian johnsongrass mosaic virus", "Sorghum mosaic virus" ), "ineffective",
ifelse(Species[i] %in% c( "Maize chlorotic mottle virus"), "unknown",
ifelse(Species[i] %in% c("Maize yellow dwarf virus", "Maize yellow mosaic virus", "Barley virus G",
"Tobacco vein distorting virus", "Maize yellow dwarf virus 2"), "unknown",
ifelse(Species[i] %in% c("Maize streak virus"), "unknown",
"unknown"))))
}
VMUs <- data.frame(Species, "insecticide"=unlist(x))
virome1 = merge(virome1, VMUs, by="Species")
virome1
ggplot(virome1, aes(x=reorder(IDs, Genus), y=(freq), fill=Genus)) +
geom_bar(position="fill", stat="identity", width = 1, alpha = 0.75)+
ggtitle("Virome genus frequency of MLN virome in Kenya") +
facet_grid(scales = "free", space = "free") +
scale_fill_viridis(discrete = T, option = "C") +
scale_x_reordered() +
theme_bw()
library(tidytext)
library(viridis)
#---- Generating hist plots
#-- libraries
library(ggplot2)
ggplot(virome1, aes(x=reorder(IDs, Genus), y=(freq), fill=Genus)) +
geom_bar(position="fill", stat="identity", width = 1, alpha = 0.75)+
ggtitle("Virome genus frequency of MLN virome in Kenya") +
facet_grid(scales = "free", space = "free") +
scale_fill_viridis(discrete = T, option = "C") +
scale_x_reordered() +
theme_bw()
#---- Generating alluvial plots
#-- libraries
library(alluvial)
library(tidyverse)
RbPal <- viridis(c(length(unique(virome1$Genus))))
virome1 <- virome1 %>%
mutate( #ss = paste(Genus, Family), # pasting two groups for a special category coloring
cols = RbPal[ match(Genus, sort(unique(Genus))) ]
)
head(virome1)
# original alluvial - minus 8 and 13
alluvial(virome1[,c(1,4,5,6,8,13,7)], freq=virome1$freq,
#hide = virome1$length == 0,
col = virome1$cols,
border = virome1$cols,
alpha = 0.9,
blocks = FALSE,
ordering = list(sort(virome1$Species), sort(virome1$Species), NULL, NULL, NULL, NULL, sort(virome1$VMU)),
# change NULL to order them
cex =0.8
)
head(virome1)
# original alluvial - minus 8 and 13
alluvial(virome1[,c(1,4,5,6,7)], freq=virome1$freq,
#hide = virome1$length == 0,
col = virome1$cols,
border = virome1$cols,
alpha = 0.9,
blocks = FALSE,
ordering = list(sort(virome1$Species), sort(virome1$Species), NULL, NULL, NULL, NULL, sort(virome1$VMU)),
# change NULL to order them
cex =0.8
)
# original alluvial - minus 8 and 13
alluvial(virome1[,c(1,4,5,6,7)], freq=virome1$freq,
#hide = virome1$length == 0,
col = virome1$cols,
border = virome1$cols,
alpha = 0.9,
blocks = FALSE,
ordering = list(sort(virome1$Species), sort(virome1$Species),  NULL, NULL, sort(virome1$VMU)),
# change NULL to order them
cex =0.8
)
write.csv(virome1, "data/MLN_Wamaitha18_and-management_data_generated.csv")
